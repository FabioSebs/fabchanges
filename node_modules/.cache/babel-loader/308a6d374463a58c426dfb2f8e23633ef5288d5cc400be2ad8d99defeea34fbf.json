{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hmgha\\\\Documents\\\\GitHub\\\\assignement2\\\\src\\\\components\\\\Todo.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TodoFormE from \"./TodoFormE\";\nimport { CgCloseO } from \"react-icons/cg\";\nimport { FiEdit } from \"react-icons/fi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Todo(_ref) {\n  _s();\n  let {\n    tasks,\n    completeTask,\n    removeTask,\n    updateTask,\n    value\n  } = _ref;\n  const [update, setUpdate] = useState(\"\");\n  const [editMode, setEditMode] = useState(false);\n  const SubmitUpdate = update => {\n    updateTask(update.id, update.value);\n  };\n  function handleEdit(text) {\n    setEditMode(true);\n    setUpdate(text);\n    updateTask(text);\n  }\n  function filter(completed, show) {\n    //determines if the task should be show or not\n    if (show == \"all\") {\n      return true;\n    } else if (show == \"completed\") {\n      if (completed) return true;\n    } else if (show == \"incompleted\") {\n      if (!completed) return true;\n    } else {\n      return false;\n    }\n  }\n\n  // if(editMode) {\n  //   return <TodoFormE update={update} setUpdate={setUpdate} updateTasks={updateTask} setEditMode={setEditMode}/>;\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: editMode ? /*#__PURE__*/_jsxDEV(TodoFormE, {\n      update: update,\n      setUpdate: setUpdate,\n      updateTasks: updateTask,\n      setEditMode: setEditMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) : tasks.map((task, index) =>\n    //checks if the task should be shown and shows if is true\n    filter(task.isComplete, value) == true && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: task.isComplete ? \"task-row complete\" : \"task-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => completeTask(task.id),\n        children: task.text\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icon\",\n        children: [/*#__PURE__*/_jsxDEV(CgCloseO, {\n          onClick: () => removeTask(task.id),\n          className: \"delete-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FiEdit, {\n          onClick: () => handleEdit(task.text),\n          className: \"edit-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this))\n  }, void 0, false);\n\n  // return tasks.map((task, index) => (\n  //   //checks if the task should be shown and shows if is true\n  //   filter(task.isComplete,value) == true &&\n  //   <div\n  //     className={task.isComplete ? \"task-row complete\" : \"task-row\"}\n  //     key={index}\n  //   >\n\n  //     <div key={task.id} onClick={() => completeTask(task.id)}>\n  //       {task.text}\n  //     </div>\n  //     <div className=\"icon\">\n  //       <CgCloseO onClick={() => removeTask(task.id)} className=\"delete-icon\" />\n  //       <FiEdit\n  //         onClick={() => handleEdit(task.text)} \n  //         className=\"edit-icon\"\n  //       />\n  //     </div>\n  //   </div>\n\n  // ));\n}\n_s(Todo, \"Kv8s/8zjWmbymMnlIRljs0DoXNs=\");\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["React","useState","TodoFormE","CgCloseO","FiEdit","jsxDEV","_jsxDEV","Fragment","_Fragment","Todo","_ref","_s","tasks","completeTask","removeTask","updateTask","value","update","setUpdate","editMode","setEditMode","SubmitUpdate","id","handleEdit","text","filter","completed","show","children","updateTasks","fileName","_jsxFileName","lineNumber","columnNumber","map","task","index","isComplete","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/hmgha/Documents/GitHub/assignement2/src/components/Todo.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TodoFormE from \"./TodoFormE\";\r\nimport { CgCloseO } from \"react-icons/cg\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\n\r\nfunction Todo({ tasks, completeTask, removeTask, updateTask, value }) {\r\n  const [update, setUpdate] = useState(\"\")\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  const SubmitUpdate = (update) => {\r\n    updateTask(update.id, update.value)\r\n  }\r\n\r\n  function handleEdit(text) {\r\n    setEditMode(true)\r\n    setUpdate(text)\r\n    updateTask(text)\r\n\r\n  }\r\n\r\n  function filter(completed, show) {\r\n    //determines if the task should be show or not\r\n    if (show == \"all\") {\r\n      return true\r\n    } else if (show == \"completed\") {\r\n      if (completed)\r\n        return true\r\n    } else if (show == \"incompleted\") {\r\n      if (!completed)\r\n        return true\r\n    } else {\r\n      return false\r\n    }\r\n\r\n  }\r\n\r\n  // if(editMode) {\r\n  //   return <TodoFormE update={update} setUpdate={setUpdate} updateTasks={updateTask} setEditMode={setEditMode}/>;\r\n  // }\r\n  return <>\r\n    {editMode ? <TodoFormE update={update} setUpdate={setUpdate} updateTasks={updateTask} setEditMode={setEditMode} /> : tasks.map((task, index) => (\r\n      //checks if the task should be shown and shows if is true\r\n      filter(task.isComplete, value) == true &&\r\n      <div\r\n        className={task.isComplete ? \"task-row complete\" : \"task-row\"}\r\n        key={index}\r\n      >\r\n\r\n        <div key={task.id} onClick={() => completeTask(task.id)}>\r\n          {task.text}\r\n        </div>\r\n        <div className=\"icon\">\r\n          <CgCloseO onClick={() => removeTask(task.id)} className=\"delete-icon\" />\r\n          <FiEdit\r\n            onClick={() => handleEdit(task.text)}\r\n            className=\"edit-icon\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n    ))}\r\n  </>\r\n\r\n  // return tasks.map((task, index) => (\r\n  //   //checks if the task should be shown and shows if is true\r\n  //   filter(task.isComplete,value) == true &&\r\n  //   <div\r\n  //     className={task.isComplete ? \"task-row complete\" : \"task-row\"}\r\n  //     key={index}\r\n  //   >\r\n\r\n  //     <div key={task.id} onClick={() => completeTask(task.id)}>\r\n  //       {task.text}\r\n  //     </div>\r\n  //     <div className=\"icon\">\r\n  //       <CgCloseO onClick={() => removeTask(task.id)} className=\"delete-icon\" />\r\n  //       <FiEdit\r\n  //         onClick={() => handleEdit(task.text)} \r\n  //         className=\"edit-icon\"\r\n  //       />\r\n  //     </div>\r\n  //   </div>\r\n\r\n  // ));\r\n}\r\n\r\n\r\nexport default Todo;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}